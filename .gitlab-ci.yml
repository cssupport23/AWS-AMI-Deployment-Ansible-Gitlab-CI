image: 
  name: hashicorp/terraform
  entrypoint: [""]

cache:
  policy: pull-push
  paths:
    - .terraform/*.*
  
variables:
  S3_BUCKET_SSM: 'terrformback-bucket'
  S3_FOLDER_SSM: 'terrformback-bucket-dev'
  EC2_KEYS_PRI_SSM: 'ec2_keys_private'

stages:
  # - setupenv
  - validate
  - plan
  - apply
  - setup
  - destroy


before_script:
  - apk add --no-cache bash
  - apk add --no-cache parallel
  - apk add --no-cache aws-cli
  - apk add --no-cache zip
  - aws s3 ls
  - zip -r module/canaries/script.zip module/canaries/script.js
  - S3_BE_BUCKET=$(aws ssm get-parameter --name "${S3_BUCKET_SSM}"  --query 'Parameter.Value' --output text)
  - echo $S3_BE_BUCKET
  - S3_BE_FOLDER=$(aws ssm get-parameter --name "${S3_FOLDER_SSM}"  --query 'Parameter.Value' --output text)
  - echo $S3_BE_FOLDER
  - terraform init  -backend-config="bucket=${S3_BE_BUCKET}" -backend-config="key=${S3_BE_FOLDER}/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME" -backend-config="region=ap-south-1"


validate:
  stage: validate 
  script: 
    - ls -alh
    - echo "$CI_COMMIT_REF_NAME.tfvars"
    - terraform validate 
  tags:
    - aws

plan:
  stage: plan
  script: terraform plan -var-file "$CI_COMMIT_REF_NAME.tfvars" -out=plan.out
  tags:
    - aws
  artifacts:
    when: on_success
    expire_in: "30 days"
    paths:
      - "plan.out"

apply:
  stage: apply
  script: terraform apply  -auto-approve  plan.out
  tags:
    - aws
  when: manual
  
setup:
  stage: setup
  image: alpine:latest
  before_script:
    - apk add --no-cache bash
    - apk add --no-cache parallel
    - apk update
    - apk add python3 py3-pip  # Install Python3 and pip
    - apk add curl
    - apk add --no-cache aws-cli
    - apk add ansible
    - ansible-galaxy collection install amazon.aws
    - apk add openssh


  script:
    - EC2_KEY_PRIVATE=$(aws ssm get-parameter --name "${EC2_KEYS_PRI_SSM}"  --query 'Parameter.Value' --output text)
    - echo "$EC2_KEY_PRIVATE" > ec2_keys.pem
    - chmod 400 ec2_keys.pem
    - mv ec2_keys.pem ansible/ec2_keys.pem
    - export ANSIBLE_HOST_KEY_CHECKING=False
    - rm /usr/lib/python3.12/EXTERNALLY-MANAGED
    - pip install boto3 botocore   
    - cd ansible
    - ansible-inventory -i inventory/aws_ec2.yml --graph
    - ansible-playbook -i inventory/aws_ec2.yml  playbook.yml -u ec2-user --private-key ec2_keys.pem  # Run Ansible playbook
  tags:
    - aws
  when: manual

destroy:
  stage: destroy
  script: terraform destroy  -auto-approve  -var-file "$CI_COMMIT_REF_NAME.tfvars"
  tags:
    - aws
  when: manual

